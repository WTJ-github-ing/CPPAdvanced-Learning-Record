// 文件名：17
// 创建时间：2022/11/18 14:58:28

#include<iostream>
using namespace std;

/*
可重复利用
面向对象、泛型编程（模板）。目的就是复用性的提升。
STL：建立数据结构和算法的一套标准。  标准模板库。

STL从广义上分为：容器、算法、迭代器
容器和算法可以通过迭代器无缝衔接
STL几乎所有的代码都采用了模板类或者模板函数。

STL六大组件：容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器。
1.容器：各种数据结构、如vector、list、deque、set、map等、用来存放数据；
2.算法：各类常用的算法，如sort、find、copy、for_each等；
3.迭代器：扮演了容器和算法之间的胶合剂；
4.仿函数：行为类似函数、可以作为算法的某种策略；
5.适配器：一种用来修饰容器或者仿函数或迭代器接口的东西；
6.空间适配器：负责空间的配置与管理。


容器：
STL容器就是将运用最广泛的一些数据结构实现出来
常用的数据结构：数组、链表、树、栈、队列、集合、映射表等
序列式容器和关联式容器：
  序列式：强调值的排序、序列式容器中的每个元素均有固定的位置；
  关联式：二叉树结构、各元素之间没有严格的物理上的顺序关系；可能在放数据的同时就做了排序。

 算法：Algorithms
 有限的步骤、解决逻辑或者数学上的问题
 质变算法和非质变算法
 质变算法：运算过程中会更改区间内的元素的内容。例如、拷贝、替换、删除等等。
 非质变算法：运算过程中不会改变区间内的元素内容。例如查找、计数、遍历、寻找极值等等。

 迭代器：容器和算法之间的粘合剂
 提供一种方法、使之可以依序寻找某个容器所含的各个元素，而又无需暴露该容器的内部表示方式，每个容器都有自己专属的迭代器。
 迭代器的使用类似于指针。
 迭代器种类：
 输入迭代器            对数据的只读访问                 支持 ++ 、==、！=
 输出迭代器				只写访问                               ++
 前向迭代器			  读写操作、并能前向推进迭代器     ++、==、！=
 双向迭代器          读写操作、并能向前和向后操作      ++ 、--
 随机访问迭代器  读写、以跳跃的方式访问任意数据、功能最强    ++、--、[n]、-n、<、<=、>、>=

 常用的是双向和跳跃。


*/
int main()
{

	system("pause");
	return 0;
}
